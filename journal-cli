#!/usr/bin/env bash

####################################################################
#                                                                  #
# journal-cli: Interactive CLI journaling tool using Bash          #
# Stores journal entries in ~/.config/journal-cli/entries/         #
# Allows creating, viewing, editing, and deleting entries easily.  #
#                                                                  #
####################################################################

########################################

source "${HOME}/.config/journal-cli/tui"

# Load color codes and text animations (typewriter effect,etc.)

mkdir -p "${HOME}/.config/journal-cli/entries/"

# Ensure the entries directory exists

########################################

back () {
	while true;do
		read -s -n 1 back
		if [[ ${back} =~ ^([bB])$ ]];then
			break
		fi
	done
}

# Waits for the user to press 'b' or 'B' to go back to the previous menu.

########################################

date_organizer () {
	echo ""
	echo ""
	echo -e "Search by Date in this format [ dd-mm-yyyy ] : "
	read -p "
>> " search
   	Date="${search:0:2}"
	Month="${search:3:2}"
	Year="${search:6:4}"
	converted="${Year}-${Month}-${Date}"
	FILE="${HOME}/.config/journal-cli/entries/entry_${search}.txt"
	}

# Parses user input date, converts it to YYYY-MM-DD format, and sets FILE path.

########################################

while true;do
	clear
	figlet "JOURNAL-CLI" | lolcat
	# Display title with figlet + lolcat for colorful terminal output
	echo ""
	echo ""
	date "+%d-%m-%Y"

	# Show current date
	
	echo ""
	echo ""

	echo -e "${colours[BRIGHT_CYAN]}1]Start a new thought${colours[NC]}"
	echo -e "${colours[BRIGHT_YELLOW]}2]Look up past entries${colours[NC]}"
	echo -e "${colours[BRIGHT_GREEN]}3]Edit past entries${colours[NC]}"
	echo -e "${colours[RED]}4]Delete Entry${colours[NC]}"
	echo -e "${colours[BRIGHT_MAGNETA]}5]Exit${colours[NC]}"
	
	read -s -n 1 option
	if [[ ${option} == 1 ]];then
		clear
		sleep 0.5s
		journal="$(date "+%d-%m-%Y")"
		vim "${HOME}/.config/journal-cli/entries/entry_${journal}.txt"

		# Option 1: Start a new journal entry using vim, filename is today's date.

	elif [[ ${option} == 2 ]];then
		# Option 2: View past entries
		# Lists all entries and prompts user to select a date.
		clear
		sleep 0.5s
		echo -e "${colours[BRIGHT_GREEN]}|||||||<OLD LOGS>|||||||${colours[NC]}"
		echo ""
		echo ""
		ls "${HOME}/.config/journal-cli/entries/" || echo -e "${colours[RED]}No Journal entries found!${colours[NC]}"
		echo ""
		echo ""
		echo -e "${colours[BRIGHT_GREEN]}||||||||||||||||||||||||||||||||${colours[NC]}"
		date_organizer
		if date -d "${converted}" > /dev/null  2>&1;then
			if [[ -f "${FILE}" ]];then
				clear
				sleep 0.5s
				cat "${FILE}"
			else
				echo ""
				echo ""
				echo -e "${colours[RED]}Invalid Date!${colours[NC]}"
			fi

		else
			echo ""
			echo ""
			echo -e "${colours[RED]}Specified entry doesn't exist!${colours[NC]}"
		fi

		echo ""
		echo ""
		echo -e "${colours[WHITE]}Enter 'b' for back.${colours[NC]}"
		read -t 0.1 -n 1000 discard > /dev/null 2>&1

		# Clear any buffered input to avoid accidental key presses.

		back
	elif [[ ${option} == 3 ]];then
		# Option 3: Edit past entries
		# Prompts for date, opens existing file in vim if found.
		clear
		sleep 0.5s
		echo -e "${colours[BRIGHT_CYAN]}||||||||<EDIT MEMORIES>|||||||||${colours[NC]}"
		echo ""
		echo ""
		ls "${HOME}/.config/journal-cli/entries/" || echo -e "${colours[RED]}No journal entries found!${colours[NC]}"
		echo ""
		echo ""
		echo -e "${colours[BRIGHT_CYAN]}||||||||||||||||||||||||||||||${colours[NC]}"
		date_organizer
		if date -d "${converted}" > /dev/null 2>&1;then
			if [[ -f "${FILE}" ]];then
				clear
				sleep 0.5s
				vim "${FILE}"
			else
				echo ""
				echo ""
				echo -e "${colours[RED]}Invalid Date!${colours[NC]}"
			fi
		else
			echo ""
			echo ""
			echo -e "${colours[RED]}Specified entry doesn't exist${colours[NC]}"
		fi
		echo ""
		echo ""
		read -t 0.1 -n 1000 trash > /dev/null 2>&1
		back
	elif [[ ${option} == 4 ]];then
		# Option 4: Delete an entry
		# Prompts for date, deletes the file if it exists
		clear
		sleep 0.5s
		echo -e "${colours[RED]}||||||||<REMOVE MEMORIES>||||||||${colours[NC]}"
		echo ""
		echo ""
		ls "${HOME}/.config/journal-cli/entries/" || echo -e "${colours[RED]}No journal entries found! ${colours[NC]}"
		echo ""
		echo ""
		echo -e "${colours[BRIGHT_MAGNETA]}|||||||||||||||||||||||||||||${colours[NC]}"
		date_organizer
		if date -d "${converted}" > /dev/null 2>&1;then
			if [[ -f "${FILE}" ]];then
				clear
				sleep 0.5s
				rm "${FILE}"
			else
				echo ""
				echo ""
				echo -e "${colours[RED]}Invalid date${colours[NC]}"
			fi
		else
			echo ""
			echo ""
			echo -e "${colours[RED]}Speicified entry doesn't exist${colours[NC]}"
		fi
		echo ""
		echo ""
		read -t 0.1 -n 1000 bin > /dev/null 2>&1
		back
	elif [[ ${option} == 5 ]];then
		# Option 5: Exit the app
		# Plays the exit animation and closes the script.
		sleep 0.5s
		echo ""
		echo ""
		read -t 0.1 -n 1000  TRASH > /dev/null 2>&1
		text_animation "exiting Journal-Cli..." "RED"
		echo ""
		clear
		exit
	fi

done
